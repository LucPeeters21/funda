avg <- mean(df$Price, na.rm = TRUE)
topo$above_avg <- ifelse(topo$Price>avg,"1","0")
# impute missing numeric data by mean centering and remove rows with missing data
colSums(sapply(df, is.na))
df$Price[which(is.na(df$Price))] <- mean(df$Price,na.rm = T)
df$age[which(is.na(df$age))] <- mean(df$age,na.rm = T)
df$`Estimated neighbourhood price per m2`[which(is.na(df$`Estimated neighbourhood price per m2`))] <- mean(df$`Estimated neighbourhood price per m2`,na.rm = T)
# replace missing data
df$toilets <- recode(df$toilets, "NA = 0")
# remove outliers
# boxplot method (IQR)
summary(df$Price)
outliers <- boxplot.stats(df$Price)$out
outliers
out_ind <- which(df$Price %in% c(outliers))
out_ind
out <- df[out_ind, ]
df <- anti_join(df, out)
summary(df$Price)
write.csv(df,
"C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Projects/funda/data/df.csv", fileEncoding = "UTF-8")
############################
##   data visualization   ##
############################
# distribution of house prices
ggplot(df, aes(x = Price, fill = ..count..)) + geom_histogram(binwidth = 5000) + coord_cartesian(xlim = c(0, 2000000))
# map
topo$longitude <- as.numeric(topo$longitude)
topo$latitude <- as.numeric(topo$latitude)
# above average selection
pal0 <- colorFactor(topo.colors(8), topo$placement)
map0 <- leaflet(topo) %>% addTiles %>%
addCircleMarkers(clusterOptions = markerClusterOptions(), color = ~pal0(topo$above_avg), lat = ~latitude, lng = ~longitude, label = topo$placement) %>%  addLegend(pal = pal0, values = ~placement)
map0
# house category selection
pal1 <- colorFactor(topo.colors(2), topo$above_avg)
map1 <- leaflet(topo) %>% addTiles %>%
addCircleMarkers(clusterOptions = markerClusterOptions(), color = ~pal1(topo$above_avg), lat = ~latitude, lng = ~longitude, label = topo$above_avg) %>%  addLegend(pal = pal1, values = ~above_avg)
map1
# living space and price
ggplot(df,
aes(x = `Living space size (m2)`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("m2") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(149000, 2000000), xlim = c(50, 400)) +
geom_smooth(method='lm')
# lot size and price
ggplot(df,
aes(x = `Lot size (m2)`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("m2") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(149000, 2000000), xlim = c(50, 1000)) +
geom_smooth(method='lm')
# age and price
ggplot(df,
aes(x = age,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("age") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(200000, 800000), xlim = c(0, 250)) +
geom_smooth(method='lm')
# build year and price
ggplot(df,
aes(x = `Build year`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("age") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(200000, 800000)) +
geom_smooth(method='lm') + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# randstad and price
ggplot(data = df, aes(x = Randstad, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 800000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# province and price
ggplot(data = df, aes(x = Provincie, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 800000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# energy label and price
ggplot(data = df, aes(x = label_group, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# basement and price
ggplot(data = df, aes(x = basement, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# attic and price
ggplot(data = df, aes(x = attic, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# roof and price
ggplot(data = df, aes(x = Roof, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# House type and price
ggplot(data = df, aes(x = `House type`, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 2000000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# placement and price
ggplot(data = df, aes(x = placement, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
#
# ###########################################################
# ##      training and test set creation and statistics    ##
# ###########################################################
#
# # create train and test sets
# set.seed(1)
# sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
# train  <- df[sample, ]
# test   <- df[!sample, ]
#
# # data structure
# str(train)
# str(test)
#
# # summary statistics
# summary(train[,sapply(train[,1:24], typeof) == "integer"])
# summary(test[,sapply(train[,1:24], typeof) == "integer"])
#
# # train datasets from numeric and categorical/factor
# cat_var <- names(train)[which(sapply(train, is.character))]
# fac_var <- names(train)[which(sapply(train, is.factor))]
# num_var <- names(train)[which(sapply(train, is.numeric))]
#
# train_cat <- train[cat_var]
# train_fac <- train[fac_var]
# train_num <- train[num_var]
#
# # create barplot function
# plotHist <- function(data_in, i)
# {
#   data <- data.frame(x=data_in[[i]])
#   p <- ggplot(data=data, aes(x=factor(x))) + stat_count() + xlab(colnames(data_in)[i]) + theme_light() +
#     theme(axis.text.x = element_text(angle = 90, hjust =1))
#   return (p)
# }
#
# # create density plot function
# plotDen <- function(data_in, i){
#   data <- data.frame(x=data_in[[i]], Price = data_in$Price)
#   p <- ggplot(data= data) + geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +
#     xlab(paste0((colnames(data_in)[i]), '\n', 'Skewness: ',round(skewness(data_in[[i]], na.rm = TRUE), 2))) + theme_light()
#   return(p)
#
# }
#
# # create function to call both types of plots
# doPlots <- function(data_in, fun, ii, ncol=3)
# {
#   pp <- list()
#   for (i in ii) {
#     p <- fun(data_in=data_in, i=i)
#     pp <- c(pp, list(p))
#   }
#   do.call("grid.arrange", c(pp, ncol=ncol))
# }
#
# # call barplots
# doPlots(train_cat, fun = plotHist, ii = 1:4, ncol = 2)
# doPlots(train_cat, fun = plotHist, ii = 5:8, ncol = 2)
# doPlots(train_cat, fun = plotHist, ii = 9:11, ncol = 2)
#
# doPlots(train_fac, fun = plotHist, ii = 1:4, ncol = 2)
# doPlots(train_fac, fun = plotHist, ii = 5:8, ncol = 2)
#
# # call density plots
# doPlots(train_num, fun = plotDen, ii = 1:5, ncol = 2)
#
# # explore correlations
# correlations <- cor(na.omit(train_num))
# row_indic <- apply(correlations, 1, function(x) sum(x > 0 | x < 0) > 1)
# correlations<- correlations[row_indic ,row_indic ]
# corrplot(correlations, method="square")
#
# # find missing values in data
# colSums(sapply(train, is.na))
# colSums(sapply(test, is.na))
#
# # mark rows of test and train data
# train$isTrain <- 1
# test$isTrain <- 0
#
# # add log of house price
# #df$log_price <- log(df$Price)
df <- df %>% rename(energy = `Energy label`)
#############################
####      modelling      ####
#############################
# define model
newPredict <- df %>% select(Provincie, Gemeente, energy, `Lot size (m2)`, `Living space size (m2)`, rooms, bedrooms, bathrooms, toilets, living_floors, `House type`, placement, Roof, backyard, Price)
model <-  lm(Price ~ Provincie + Gemeente + energy + `Lot size (m2)`+`Living space size (m2)` + rooms * bedrooms * bathrooms + toilets + living_floors + `House type` + placement + backyard + Roof, data = df)
newPredict$pred <-  predict(model, newPredict)
newPredict$error <- newPredict$Price - newPredict$pred
# define RMSE
newPredict$error_sqr <- newPredict$error * newPredict$error
n <- nrow(newPredict)
MSE <- sum(newPredict$error_sqr, na.rm = TRUE)/n
RMSE <- sqrt(MSE)
# visualise error distribution
hist(newPredict$error, breaks=25)
#############################
#### shiny application 1 ####
#############################
# define ui
ui <- fluidPage(theme = shinytheme("cyborg"),
headerPanel("Huizenprijs Generator"),
sidebarPanel(
selectInput(inputId = "city", label = "Provincie",
choices = df$Provincie,
selected = df$Provincie[1]),
selectInput(inputId = "city", label = "Energie label",
choices = df$energy,
selected = df$energy[1]),
actionButton("go", "Voorspel")
),
mainPanel(
sidebarPanel( width = 25,
headerPanel("Prijs: "),
textOutput("value")
)
)
)
# define server
server <- function(input, output) {
observeEvent(input$go,{
})
output$value <- renderText({newPredict$pred})
}
# run app
shinyApp(ui, server)
# define model
newPredict <- df %>% select(Provincie, Gemeente, energy, `Lot size (m2)`, `Living space size (m2)`, rooms, bedrooms, bathrooms, toilets, living_floors, `House type`, placement, Roof, frontyard, backyard, Price)
model <-  lm(Price ~ Provincie + Gemeente + energy + `Lot size (m2)`+`Living space size (m2)` + rooms * bedrooms * bathrooms + toilets + living_floors + `House type` + placement + frontyard * backyard + Roof, data = df)
newPredict$pred <-  predict(model, newPredict)
newPredict$error <- newPredict$Price - newPredict$pred
# define RMSE
newPredict$error_sqr <- newPredict$error * newPredict$error
n <- nrow(newPredict)
MSE <- sum(newPredict$error_sqr, na.rm = TRUE)/n
RMSE <- sqrt(MSE)
# visualise error distribution
hist(newPredict$error, breaks=25)
View(newPredict)
# define model
newPredict <- df %>% select(Provincie, Gemeente, energy, `Lot size (m2)`, `Living space size (m2)`, rooms, bedrooms, bathrooms, toilets, living_floors, `House type`, placement, Roof, frontyard, backyard, Price)
model <-  lm(Price ~ Provincie + Gemeente + energy + `Lot size (m2)`+`Living space size (m2)` + rooms * bedrooms * bathrooms + toilets + living_floors + `House type` + placement + frontyard + backyard + Roof, data = df)
newPredict$pred <-  predict(model, newPredict)
newPredict$error <- newPredict$Price - newPredict$pred
# define RMSE
newPredict$error_sqr <- newPredict$error * newPredict$error
n <- nrow(newPredict)
MSE <- sum(newPredict$error_sqr, na.rm = TRUE)/n
RMSE <- sqrt(MSE)
# visualise error distribution
hist(newPredict$error, breaks=25)
# define model
newPredict <- df %>% select(Provincie, Gemeente, energy, `Lot size (m2)`, `Living space size (m2)`, rooms, bedrooms, bathrooms, toilets, living_floors, `House type`, placement, Roof, frontyard, backyard, Price)
model <-  lm(Price ~ Provincie + Gemeente + energy + `Lot size (m2)`+`Living space size (m2)` + rooms * bedrooms * bathrooms + toilets + living_floors + `House type` + placement + frontyard + Roof, data = df)
newPredict$pred <-  predict(model, newPredict)
newPredict$error <- newPredict$Price - newPredict$pred
# define RMSE
newPredict$error_sqr <- newPredict$error * newPredict$error
n <- nrow(newPredict)
MSE <- sum(newPredict$error_sqr, na.rm = TRUE)/n
RMSE <- sqrt(MSE)
View(df)
# create new frontyard variable
mapping <- c("Achtertuin" = 0,
"Achtertuin en patio/atrium" = 0,
"Achtertuin en plaats" = 0,
"Achtertuin en tuin rondom" = 0,
"Achtertuin en voortuin" = 1,
"Achtertuin en zijtuin" = 0,
"Achtertuin en zonneterras" = 0,
"Achtertuin, patio/atrium en plaats" = 0,
"Achtertuin, patio/atrium en voortuin" = 1,
"Achtertuin, plaats en voortuin" = 1,
"Achtertuin, plaats, voortuin en zijtuin" = 1,
"Achtertuin, plaats, voortuin en zonneterras" = 1,
"Achtertuin, tuin rondom, voortuin en zijtuin" = 1,
"Achtertuin, tuin rondom, voortuin, zijtuin en zonneterras" = 1,
"Achtertuin, voortuin en zijtuin" = 1,
"Achtertuin, voortuin en zonneterras" = 1,
"Achtertuin, voortuin, zijtuin en zonneterras" = 1,
"Achtertuin, zijtuin en zonneterras" = 0,
"Patio/atrium" = 0,
"Patio/atrium en plaats" = 0,
"Patio/atrium en tuin rondom" = 0,
"Patio/atrium en voortuin" = 1,
"Patio/atrium en zijtuin" = 0,
"Patio/atrium en zonneterras" = 0,
"Patio/atrium, plaats, zijtuin en zonneterras" = 0,
"Patio/atrium, tuin rondom en zonneterras" = 0,
"Patio/atrium, voortuin en zijtuin" = 1,
"Patio/atrium, voortuin en zonneterras" = 1,
"Plaats" = 0,
"Plaats en voortuin" = 1,
"Plaats en zijtuin" = 0,
"Plaats en zonneterras" = 0,
"Plaats, voortuin en zijtuin" = 1,
"Tuin rondom" = 0,
"Tuin rondom en voortuin" = 1,
"Tuin rondom en zijtuin" = 0,
"Tuin rondom en zonneterras" = 0,
"Voortuin" = 1,
"Voortuin en zijtuin" = 1,
"Voortuin en zonneterras" = 1,
"Voortuin, zijtuin en zonneterras" = 1,
"Zijtuin" = 0,
"Zonneterras" = 0)
df$frontyard <- mapping[df$Garden]
df$frontyard <- recode(df$frontyard, "NA = 0")
df$frontyard <- as.factor(df$frontyard)
df <- df %>% relocate(frontyard, .after = Garden)
View(df)
View(df)
View(newPredict)
mapping <- c("Achtertuin" = 1,
"Achtertuin en patio/atrium" = 1,
"Achtertuin en plaats" = 1,
"Achtertuin en tuin rondom" = 1,
"Achtertuin en voortuin" = 1,
"Achtertuin en zijtuin" = 1,
"Achtertuin en zonneterras" = 1,
"Achtertuin, patio/atrium en plaats" = 1,
"Achtertuin, patio/atrium en voortuin" = 1,
"Achtertuin, plaats en voortuin" = 1,
"Achtertuin, plaats, voortuin en zijtuin" = 1,
"Achtertuin, plaats, voortuin en zonneterras" = 1,
"Achtertuin, tuin rondom, voortuin en zijtuin" = 1,
"Achtertuin, tuin rondom, voortuin, zijtuin en zonneterras" = 1,
"Achtertuin, voortuin en zijtuin" = 1,
"Achtertuin, voortuin en zonneterras" = 1,
"Achtertuin, voortuin, zijtuin en zonneterras" = 1,
"Achtertuin, zijtuin en zonneterras" = 1,
"Patio/atrium" = 0,
"Patio/atrium en plaats" = 0,
"Patio/atrium en tuin rondom" = 0,
"Patio/atrium en voortuin" = 0,
"Patio/atrium en zijtuin" = 0,
"Patio/atrium en zonneterras" = 0,
"Patio/atrium, plaats, zijtuin en zonneterras" = 0,
"Patio/atrium, tuin rondom en zonneterras" = 0,
"Patio/atrium, voortuin en zijtuin" = 0,
"Patio/atrium, voortuin en zonneterras" = 0,
"Plaats" = 0,
"Plaats en voortuin" = 0,
"Plaats en zijtuin" = 0,
"Plaats en zonneterras" = 0,
"Plaats, voortuin en zijtuin" = 0,
"Tuin rondom" = 0,
"Tuin rondom en voortuin" = 0,
"Tuin rondom en zijtuin" = 0,
"Tuin rondom en zonneterras" = 0,
"Voortuin" = 0,
"Voortuin en zijtuin" = 0,
"Voortuin en zonneterras" = 0,
"Voortuin, zijtuin en zonneterras" = 0,
"Zijtuin" = 0,
"Zonneterras" = 0)
df$backyard <- mapping[df$Garden]
df$backyard <- recode(df$backyard, "NA = 0")
df$backyard <- as.factor(df$backyard)
df <- df %>% relocate(backyard, .after = Garden)
# create new frontyard variable
mapping <- c("Achtertuin" = 0,
"Achtertuin en patio/atrium" = 0,
"Achtertuin en plaats" = 0,
"Achtertuin en tuin rondom" = 0,
"Achtertuin en voortuin" = 1,
"Achtertuin en zijtuin" = 0,
"Achtertuin en zonneterras" = 0,
"Achtertuin, patio/atrium en plaats" = 0,
"Achtertuin, patio/atrium en voortuin" = 1,
"Achtertuin, plaats en voortuin" = 1,
"Achtertuin, plaats, voortuin en zijtuin" = 1,
"Achtertuin, plaats, voortuin en zonneterras" = 1,
"Achtertuin, tuin rondom, voortuin en zijtuin" = 1,
"Achtertuin, tuin rondom, voortuin, zijtuin en zonneterras" = 1,
"Achtertuin, voortuin en zijtuin" = 1,
"Achtertuin, voortuin en zonneterras" = 1,
"Achtertuin, voortuin, zijtuin en zonneterras" = 1,
"Achtertuin, zijtuin en zonneterras" = 0,
"Patio/atrium" = 0,
"Patio/atrium en plaats" = 0,
"Patio/atrium en tuin rondom" = 0,
"Patio/atrium en voortuin" = 1,
"Patio/atrium en zijtuin" = 0,
"Patio/atrium en zonneterras" = 0,
"Patio/atrium, plaats, zijtuin en zonneterras" = 0,
"Patio/atrium, tuin rondom en zonneterras" = 0,
"Patio/atrium, voortuin en zijtuin" = 1,
"Patio/atrium, voortuin en zonneterras" = 1,
"Plaats" = 0,
"Plaats en voortuin" = 1,
"Plaats en zijtuin" = 0,
"Plaats en zonneterras" = 0,
"Plaats, voortuin en zijtuin" = 1,
"Tuin rondom" = 0,
"Tuin rondom en voortuin" = 1,
"Tuin rondom en zijtuin" = 0,
"Tuin rondom en zonneterras" = 0,
"Voortuin" = 1,
"Voortuin en zijtuin" = 1,
"Voortuin en zonneterras" = 1,
"Voortuin, zijtuin en zonneterras" = 1,
"Zijtuin" = 0,
"Zonneterras" = 0)
df$frontyard <- mapping[df$Garden]
df$frontyard <- recode(df$frontyard, "NA = 0")
df$frontyard <- as.factor(df$frontyard)
df <- df %>% relocate(frontyard, .before = backyard)
View(df)
df %>% count(frontyard)
df %>% count(backyard)
# define model
newPredict <- df %>% select(Provincie, Gemeente, energy, `Lot size (m2)`, `Living space size (m2)`, rooms, bedrooms, bathrooms, toilets, living_floors, `House type`, placement, Roof, frontyard, backyard, Price)
model <-  lm(Price ~ Provincie + Gemeente + energy + `Lot size (m2)`+`Living space size (m2)` + rooms * bedrooms * bathrooms + toilets + living_floors + `House type` + placement + frontyard + backyard + Roof, data = df)
newPredict$pred <-  predict(model, newPredict)
newPredict$error <- newPredict$Price - newPredict$pred
# define RMSE
newPredict$error_sqr <- newPredict$error * newPredict$error
n <- nrow(newPredict)
MSE <- sum(newPredict$error_sqr, na.rm = TRUE)/n
RMSE <- sqrt(MSE)
# visualise error distribution
hist(newPredict$error, breaks=25)
#############################
####      modelling      ####
#############################
# define model
newPredict <- df %>% select(Provincie, Gemeente, energy, `Lot size (m2)`, `Living space size (m2)`, rooms, bedrooms, bathrooms, toilets, living_floors, `House type`, placement, Roof, frontyard, backyard, Price)
model <-  lm(Price ~ Provincie + Gemeente + energy + `Lot size (m2)`+`Living space size (m2)` + rooms * bedrooms * bathrooms + toilets + living_floors + `House type` + placement + frontyard * backyard + Roof, data = df)
newPredict$pred <-  predict(model, newPredict)
newPredict$error <- newPredict$Price - newPredict$pred
# define RMSE
newPredict$error_sqr <- newPredict$error * newPredict$error
n <- nrow(newPredict)
MSE <- sum(newPredict$error_sqr, na.rm = TRUE)/n
RMSE <- sqrt(MSE)
# visualise error distribution
hist(newPredict$error, breaks=25)
# create new aroundyard variable
mapping <- c("Achtertuin" = 0,
"Achtertuin en patio/atrium" = 0,
"Achtertuin en plaats" = 0,
"Achtertuin en tuin rondom" = 1,
"Achtertuin en voortuin" = 0,
"Achtertuin en zijtuin" = 0,
"Achtertuin en zonneterras" = 0,
"Achtertuin, patio/atrium en plaats" = 0,
"Achtertuin, patio/atrium en voortuin" = 0,
"Achtertuin, plaats en voortuin" = 0,
"Achtertuin, plaats, voortuin en zijtuin" = 0,
"Achtertuin, plaats, voortuin en zonneterras" = 0,
"Achtertuin, tuin rondom, voortuin en zijtuin" = 1,
"Achtertuin, tuin rondom, voortuin, zijtuin en zonneterras" = 1,
"Achtertuin, voortuin en zijtuin" = 0,
"Achtertuin, voortuin en zonneterras" = 0,
"Achtertuin, voortuin, zijtuin en zonneterras" = 0,
"Achtertuin, zijtuin en zonneterras" = 0,
"Patio/atrium" = 0,
"Patio/atrium en plaats" = 0,
"Patio/atrium en tuin rondom" = 1,
"Patio/atrium en voortuin" = 0,
"Patio/atrium en zijtuin" = 0,
"Patio/atrium en zonneterras" = 0,
"Patio/atrium, plaats, zijtuin en zonneterras" = 0,
"Patio/atrium, tuin rondom en zonneterras" = 1,
"Patio/atrium, voortuin en zijtuin" = 0,
"Patio/atrium, voortuin en zonneterras" = 0,
"Plaats" = 0,
"Plaats en voortuin" = 0,
"Plaats en zijtuin" = 0,
"Plaats en zonneterras" = 0,
"Plaats, voortuin en zijtuin" = 0,
"Tuin rondom" = 1,
"Tuin rondom en voortuin" = 1,
"Tuin rondom en zijtuin" = 1,
"Tuin rondom en zonneterras" = 1,
"Voortuin" = 0,
"Voortuin en zijtuin" = 0,
"Voortuin en zonneterras" = 0,
"Voortuin, zijtuin en zonneterras" = 0,
"Zijtuin" = 0,
"Zonneterras" = 0)
df$aroundyard <- mapping[df$Garden]
df$aroundyard <- recode(df$aroundyard, "NA = 0")
df$aroundyard <- as.factor(df$aroundyard)
df <- df %>% relocate(aroundyard, .after = backyard)
View(df)
df %>% count(aroundyard)
#############################
####      modelling      ####
#############################
# define model
newPredict <- df %>% select(Provincie, Gemeente, energy, `Lot size (m2)`, `Living space size (m2)`, rooms, bedrooms, bathrooms, toilets, living_floors, `House type`, placement, Roof, frontyard, backyard, aroundyard, Price)
model <-  lm(Price ~ Provincie + Gemeente + energy + `Lot size (m2)`+`Living space size (m2)` + rooms * bedrooms * bathrooms + toilets + living_floors + `House type` + placement + frontyard * backyard*aroundyard + Roof, data = df)
newPredict$pred <-  predict(model, newPredict)
newPredict$error <- newPredict$Price - newPredict$pred
# define RMSE
newPredict$error_sqr <- newPredict$error * newPredict$error
n <- nrow(newPredict)
MSE <- sum(newPredict$error_sqr, na.rm = TRUE)/n
RMSE <- sqrt(MSE)
# visualise error distribution
hist(newPredict$error, breaks=25)
summary(model)
options(max.print=1000000)
summary(model)
modelframe <- summary(model)
View(modelframe)
modelframe <- as.data.frame(model)
