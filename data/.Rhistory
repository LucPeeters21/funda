# import funda and city data
df_funda <- read_excel("raw_data_for_excel_analysis.xlsx")
df_places <- read_excel("plaatsnamen_nederland.xlsx")
######################
## data preparation ##
######################
# remove NA's and exact duplicates
df_places <- na.omit(df_places)
df_places <- df_places[!duplicated(df_places$City), ]
# merge funda and city data
df <- merge(df_funda, df_places, by = 'City')
# subset only unique adresses after merge
df <- unique(df)
# remove 'build type' variable since it has only one value expect for two observations
df <- df %>% select(-`Build type`)
# relocate 'Gemeente' and 'Provincie' variables
df <- df %>% relocate(Gemeente, .after = Address)
df <- df %>% relocate(Provincie, .after = Gemeente)
# remove 'Address'
df <- df %>% select(-Address)
# convert to correct data types
df$Price <- as.numeric(df$Price)
df$`Build year` <- as.character(df$`Build year`)
# separate rooms into 'rooms' and 'bed_rooms' to create two separate variables
df <- separate(df, col=Rooms, into =c("rooms", "bedrooms"), sep=" kamers ")
df$bedrooms <- gsub('[(slaapkamers)]','',df$bedrooms)
df$bedrooms <- gsub('[(]','',df$bedrooms)
df$rooms <- as.numeric(df$rooms)
df$bedrooms <- as.numeric(df$bedrooms)
# separate Toilet into 'bathrooms' and 'toilets'
df <- separate(df, col=Toilet, into =c("bathrooms", "toilets"), sep=" en ")
df$bathrooms <- gsub('[(badkamers)]','',df$bathrooms)
df$toilets <- gsub('[(aparte toiletten)]','',df$toilets)
df$bathrooms <- as.numeric(df$bathrooms)
df$toilets <- as.numeric(df$toilets)
# separate Floors into 'floors' and 'basement/attic'
df <- separate(df, col=Floors, into =c("living_floors", "basement"), sep=" woonla")
df$`basement` <- gsub(',','',df$`basement`)
# duplicate 'basement' column and name 'attic'
df$attic = df$basement
df <- df %>% relocate(attic, .after = basement)
# turn 'basement' into 0's and 1's
mapping <- c("ag" = 0,
"ag een vliering en een kelder" = 1,
"ag een zolder en een kelder" = 1,
"ag en een kelder" = 1,
"ag en een vliering" = 0,
"ag en een zolder" = 0,
"ag en een zolder met vliering" = 0,
"gen" = 0,
"gen een vliering en een kelder" = 1,
"gen een zolder en een kelder" = 1,
"gen een zolder met vliering en een kelder" = 1,
"gen en een kelder" = 1,
"gen en een vliering" = 0,
"gen en een zolder" = 0,
"gen en een zolder met vliering" = 1)
df$basement <- mapping[df$basement]
# turn 'attic' into 0's and 1's
mapping <- c("ag" = 0,
"ag een vliering en een kelder" = 1,
"ag een zolder en een kelder" = 1,
"ag en een kelder" = 0,
"ag en een vliering" = 1,
"ag en een zolder" = 1,
"ag en een zolder met vliering" = 1,
"gen" = 0,
"gen een vliering en een kelder" = 1,
"gen een zolder en een kelder" = 1,
"gen een zolder met vliering en een kelder" = 1,
"gen en een kelder" = 0,
"gen en een vliering" = 1,
"gen en een zolder" = 1,
"gen en een zolder met vliering" = 1)
df$attic <- mapping[df$attic]
# create new variable 'Randstad'
df <- df %>%
mutate(Randstad = case_when(Provincie == 'Drenthe' ~ 0,
Provincie == 'Flevoland' ~ 0,
Provincie == 'Frysl√¢n' ~ 0,
Provincie == 'Gelderland' ~ 0,
Provincie == 'Groningen' ~ 0,
Provincie == 'Limburg' ~ 0,
Provincie == 'Noord-Brabant' ~ 0,
Provincie == 'Noord-Holland' ~ 1,
Provincie == 'Overijssel' ~ 0,
Provincie == 'Utrecht' ~ 1,
Provincie == 'Zeeland' ~ 0,
Provincie == 'Zuid-Holland' ~ 1))
# create groups for energy labels
df <- df %>%
mutate(label_group = case_when(`Energy label` == 'G' ~ 'very low',
`Energy label` == 'F' ~ 'very low',
`Energy label` == 'E' ~ 'low',
`Energy label` == 'D' ~ 'low',
`Energy label` == 'C' ~ 'medior',
`Energy label` == 'B' ~ 'medior',
`Energy label` == 'A' ~ 'high',
`Energy label` == 'A+' ~ 'high',
`Energy label` == 'A++' ~ 'very high',
`Energy label` == 'A+++' ~ 'very high',
`Energy label` == 'A++++' ~ 'very high',
`Energy label` == 'Niet verplicht' ~ 'unknown'))
# create new variable called 'age'
x <- Sys.Date()
x <- year(x)
df$age <- x - as.numeric(df$`Build year`)
# turn variables into factors
df$basement <- as.factor(df$basement)
df$attic <- as.factor(df$attic)
df$rooms <- as.factor(df$rooms)
df$bedrooms <- as.factor(df$bedrooms)
df$bathrooms <- as.factor(df$bathrooms)
df$toilets <- as.factor(df$toilets)
df$Randstad <- as.factor(df$Randstad)
df <- df %>% relocate(Randstad, .after = Provincie)
df <- df %>% relocate(`House type`, .after = Garden)
df <- df %>% relocate(Roof, .after = `House type`)
df <- df %>% relocate(age, .after = `Build year`)
df <- df %>% relocate(label_group, .after = `Energy label`)
View(df)
# living space and price
ggplot(df,
aes(x = `Living space size (m2)`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("m2") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(149000, 2000000), xlim = c(50, 400)) +
geom_smooth(method='lm')
# age and price
ggplot(df,
aes(x = age,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("age") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(200000, 800000), xlim = c(0, 250)) +
geom_smooth(method='lm')
# build year and price
ggplot(df,
aes(x = `Build year`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("age") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(200000, 800000)) +
geom_smooth(method='lm') + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# randstad and price
ggplot(data = df, aes(x = Randstad, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 800000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# province and price
ggplot(data = df, aes(x = Provincie, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 800000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# energy label and price
ggplot(data = df, aes(x = label_group, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 2000000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# energy label and price
ggplot(data = df, aes(x = label_group, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
df %>% count(label_group)
model4 <- lm(Price ~ label_group, data = df)
summary(model4)
# basement and price
ggplot(data = df, aes(x = basement, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
options(scipen = 999)
#################
## data import ##
#################
# set working directory
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Projects/funda/data")
# import funda and city data
df_funda <- read_excel("raw_data_for_excel_analysis.xlsx")
df_places <- read_excel("plaatsnamen_nederland.xlsx")
######################
## data preparation ##
######################
# remove NA's and exact duplicates
df_places <- na.omit(df_places)
df_places <- df_places[!duplicated(df_places$City), ]
# merge funda and city data
df <- merge(df_funda, df_places, by = 'City')
# subset only unique adresses after merge
df <- unique(df)
# remove 'build type' variable since it has only one value expect for two observations
df <- df %>% select(-`Build type`)
# relocate 'Gemeente' and 'Provincie' variables
df <- df %>% relocate(Gemeente, .after = Address)
df <- df %>% relocate(Provincie, .after = Gemeente)
# remove 'Address'
df <- df %>% select(-Address)
# convert to correct data types
df$Price <- as.numeric(df$Price)
df$`Build year` <- as.character(df$`Build year`)
# separate rooms into 'rooms' and 'bed_rooms' to create two separate variables
df <- separate(df, col=Rooms, into =c("rooms", "bedrooms"), sep=" kamers ")
df$bedrooms <- gsub('[(slaapkamers)]','',df$bedrooms)
df$bedrooms <- gsub('[(]','',df$bedrooms)
df$rooms <- as.numeric(df$rooms)
df$bedrooms <- as.numeric(df$bedrooms)
# separate Toilet into 'bathrooms' and 'toilets'
df <- separate(df, col=Toilet, into =c("bathrooms", "toilets"), sep=" en ")
df$bathrooms <- gsub('[(badkamers)]','',df$bathrooms)
df$toilets <- gsub('[(aparte toiletten)]','',df$toilets)
df$bathrooms <- as.numeric(df$bathrooms)
df$toilets <- as.numeric(df$toilets)
# separate Floors into 'floors' and 'basement/attic'
df <- separate(df, col=Floors, into =c("living_floors", "basement"), sep=" woonla")
df$`basement` <- gsub(',','',df$`basement`)
# duplicate 'basement' column and name 'attic'
df$attic = df$basement
df <- df %>% relocate(attic, .after = basement)
# turn 'basement' into 0's and 1's
mapping <- c("ag" = 0,
"ag een vliering en een kelder" = 1,
"ag een zolder en een kelder" = 1,
"ag en een kelder" = 1,
"ag en een vliering" = 0,
"ag en een zolder" = 0,
"ag en een zolder met vliering" = 0,
"gen" = 0,
"gen een vliering en een kelder" = 1,
"gen een zolder en een kelder" = 1,
"gen een zolder met vliering en een kelder" = 1,
"gen en een kelder" = 1,
"gen en een vliering" = 0,
"gen en een zolder" = 0,
"gen en een zolder met vliering" = 1)
df$basement <- mapping[df$basement]
# turn 'attic' into 0's and 1's
mapping <- c("ag" = 0,
"ag een vliering en een kelder" = 1,
"ag een zolder en een kelder" = 1,
"ag en een kelder" = 0,
"ag en een vliering" = 1,
"ag en een zolder" = 1,
"ag en een zolder met vliering" = 1,
"gen" = 0,
"gen een vliering en een kelder" = 1,
"gen een zolder en een kelder" = 1,
"gen een zolder met vliering en een kelder" = 1,
"gen en een kelder" = 0,
"gen en een vliering" = 1,
"gen en een zolder" = 1,
"gen en een zolder met vliering" = 1)
df$attic <- mapping[df$attic]
# create new variable 'Randstad'
df <- df %>%
mutate(Randstad = case_when(Provincie == 'Drenthe' ~ 0,
Provincie == 'Flevoland' ~ 0,
Provincie == 'Frysl√¢n' ~ 0,
Provincie == 'Gelderland' ~ 0,
Provincie == 'Groningen' ~ 0,
Provincie == 'Limburg' ~ 0,
Provincie == 'Noord-Brabant' ~ 0,
Provincie == 'Noord-Holland' ~ 1,
Provincie == 'Overijssel' ~ 0,
Provincie == 'Utrecht' ~ 1,
Provincie == 'Zeeland' ~ 0,
Provincie == 'Zuid-Holland' ~ 1))
# create groups for energy labels
df <- df %>%
mutate(label_group = case_when(`Energy label` == 'G' ~ 'very low',
`Energy label` == 'F' ~ 'very low',
`Energy label` == 'E' ~ 'low',
`Energy label` == 'D' ~ 'low',
`Energy label` == 'C' ~ 'medior',
`Energy label` == 'B' ~ 'medior',
`Energy label` == 'A' ~ 'high',
`Energy label` == 'A+' ~ 'high',
`Energy label` == 'A++' ~ 'very high',
`Energy label` == 'A+++' ~ 'very high',
`Energy label` == 'A++++' ~ 'very high',
`Energy label` == 'Niet verplicht' ~ 'unknown'))
# create new variable called 'age'
x <- Sys.Date()
x <- year(x)
df$age <- x - as.numeric(df$`Build year`)
# turn variables into factors
df$basement <- as.factor(df$basement)
df$attic <- as.factor(df$attic)
df$rooms <- as.factor(df$rooms)
df$bedrooms <- as.factor(df$bedrooms)
df$bathrooms <- as.factor(df$bathrooms)
df$toilets <- as.factor(df$toilets)
df$Randstad <- as.factor(df$Randstad)
df <- df %>% relocate(Randstad, .after = Provincie)
df <- df %>% relocate(`House type`, .after = Garden)
df <- df %>% relocate(Roof, .after = `House type`)
df <- df %>% relocate(age, .after = `Build year`)
df <- df %>% relocate(label_group, .after = `Energy label`)
############################
##   data visualization   ##
############################
# living space and price
ggplot(df,
aes(x = `Living space size (m2)`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("m2") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(149000, 2000000), xlim = c(50, 400)) +
geom_smooth(method='lm')
# age and price
ggplot(df,
aes(x = age,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("age") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(200000, 800000), xlim = c(0, 250)) +
geom_smooth(method='lm')
# build year and price
ggplot(df,
aes(x = `Build year`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("age") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(200000, 800000)) +
geom_smooth(method='lm') + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# randstad and price
ggplot(data = df, aes(x = Randstad, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 800000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# province and price
ggplot(data = df, aes(x = Provincie, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 800000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# energy label and price
ggplot(data = df, aes(x = label_group, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# basement and price
ggplot(data = df, aes(x = basement, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# attic and price
ggplot(data = df, aes(x = attic, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# basement and price
ggplot(data = df, aes(x = basement, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
df %>% count(basement)
df %>% count(basement)
options(scipen = 999)
#################
## data import ##
#################
# set working directory
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Projects/funda/data")
# import funda and city data
df_funda <- read_excel("raw_data_for_excel_analysis.xlsx")
df_places <- read_excel("plaatsnamen_nederland.xlsx")
######################
## data preparation ##
######################
# remove NA's and exact duplicates
df_places <- na.omit(df_places)
df_places <- df_places[!duplicated(df_places$City), ]
# merge funda and city data
df <- merge(df_funda, df_places, by = 'City')
# subset only unique adresses after merge
df <- unique(df)
# remove 'build type' variable since it has only one value expect for two observations
df <- df %>% select(-`Build type`)
# relocate 'Gemeente' and 'Provincie' variables
df <- df %>% relocate(Gemeente, .after = Address)
df <- df %>% relocate(Provincie, .after = Gemeente)
# remove 'Address'
df <- df %>% select(-Address)
# convert to correct data types
df$Price <- as.numeric(df$Price)
df$`Build year` <- as.character(df$`Build year`)
# separate rooms into 'rooms' and 'bed_rooms' to create two separate variables
df <- separate(df, col=Rooms, into =c("rooms", "bedrooms"), sep=" kamers ")
df$bedrooms <- gsub('[(slaapkamers)]','',df$bedrooms)
df$bedrooms <- gsub('[(]','',df$bedrooms)
df$rooms <- as.numeric(df$rooms)
df$bedrooms <- as.numeric(df$bedrooms)
# separate Toilet into 'bathrooms' and 'toilets'
df <- separate(df, col=Toilet, into =c("bathrooms", "toilets"), sep=" en ")
df$bathrooms <- gsub('[(badkamers)]','',df$bathrooms)
df$toilets <- gsub('[(aparte toiletten)]','',df$toilets)
df$bathrooms <- as.numeric(df$bathrooms)
df$toilets <- as.numeric(df$toilets)
# separate Floors into 'floors' and 'basement/attic'
df <- separate(df, col=Floors, into =c("living_floors", "basement"), sep=" woonla")
df$`basement` <- gsub(',','',df$`basement`)
# duplicate 'basement' column and name 'attic'
df$attic = df$basement
df <- df %>% relocate(attic, .after = basement)
# turn 'basement' into 0's and 1's
mapping <- c("ag" = 0,
"ag een vliering en een kelder" = 1,
"ag een zolder en een kelder" = 1,
"ag en een kelder" = 1,
"ag en een vliering" = 0,
"ag en een zolder" = 0,
"ag en een zolder met vliering" = 0,
"gen" = 0,
"gen een vliering en een kelder" = 1,
"gen een zolder en een kelder" = 1,
"gen een zolder met vliering en een kelder" = 1,
"gen en een kelder" = 1,
"gen en een vliering" = 0,
"gen en een zolder" = 0,
"gen en een zolder met vliering" = 1)
df$basement <- mapping[df$basement]
# turn 'attic' into 0's and 1's
mapping <- c("ag" = 0,
"ag een vliering en een kelder" = 1,
"ag een zolder en een kelder" = 1,
"ag en een kelder" = 0,
"ag en een vliering" = 1,
"ag en een zolder" = 1,
"ag en een zolder met vliering" = 1,
"gen" = 0,
"gen een vliering en een kelder" = 1,
"gen een zolder en een kelder" = 1,
"gen een zolder met vliering en een kelder" = 1,
"gen en een kelder" = 0,
"gen en een vliering" = 1,
"gen en een zolder" = 1,
"gen en een zolder met vliering" = 1)
df$attic <- mapping[df$attic]
# create new variable 'Randstad'
df <- df %>%
mutate(Randstad = case_when(Provincie == 'Drenthe' ~ 0,
Provincie == 'Flevoland' ~ 0,
Provincie == 'Frysl√¢n' ~ 0,
Provincie == 'Gelderland' ~ 0,
Provincie == 'Groningen' ~ 0,
Provincie == 'Limburg' ~ 0,
Provincie == 'Noord-Brabant' ~ 0,
Provincie == 'Noord-Holland' ~ 1,
Provincie == 'Overijssel' ~ 0,
Provincie == 'Utrecht' ~ 1,
Provincie == 'Zeeland' ~ 0,
Provincie == 'Zuid-Holland' ~ 1))
# create groups for energy labels
df <- df %>%
mutate(label_group = case_when(`Energy label` == 'G' ~ 'very low',
`Energy label` == 'F' ~ 'very low',
`Energy label` == 'E' ~ 'low',
`Energy label` == 'D' ~ 'low',
`Energy label` == 'C' ~ 'medior',
`Energy label` == 'B' ~ 'medior',
`Energy label` == 'A' ~ 'high',
`Energy label` == 'A+' ~ 'high',
`Energy label` == 'A++' ~ 'very high',
`Energy label` == 'A+++' ~ 'very high',
`Energy label` == 'A++++' ~ 'very high',
`Energy label` == 'Niet verplicht' ~ 'unknown'))
# create new variable called 'age'
x <- Sys.Date()
x <- year(x)
df$age <- x - as.numeric(df$`Build year`)
# turn variables into factors
df$basement <- as.factor(df$basement)
df$attic <- as.factor(df$attic)
df$rooms <- as.factor(df$rooms)
df$bedrooms <- as.factor(df$bedrooms)
df$bathrooms <- as.factor(df$bathrooms)
df$toilets <- as.factor(df$toilets)
df$Randstad <- as.factor(df$Randstad)
df <- df %>% relocate(Randstad, .after = Provincie)
df <- df %>% relocate(`House type`, .after = Garden)
df <- df %>% relocate(Roof, .after = `House type`)
df <- df %>% relocate(age, .after = `Build year`)
df <- df %>% relocate(label_group, .after = `Energy label`)
############################
##   data visualization   ##
############################
# living space and price
ggplot(df,
aes(x = `Living space size (m2)`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("m2") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(149000, 2000000), xlim = c(50, 400)) +
geom_smooth(method='lm')
# age and price
ggplot(df,
aes(x = age,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("age") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(200000, 800000), xlim = c(0, 250)) +
geom_smooth(method='lm')
# build year and price
ggplot(df,
aes(x = `Build year`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("age") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(200000, 800000)) +
geom_smooth(method='lm') + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# randstad and price
ggplot(data = df, aes(x = Randstad, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 800000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# province and price
ggplot(data = df, aes(x = Provincie, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 800000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# energy label and price
ggplot(data = df, aes(x = label_group, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# basement and price
ggplot(data = df, aes(x = basement, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
# attic and price
ggplot(data = df, aes(x = attic, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
df %>% count(basement)
