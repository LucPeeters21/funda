df$attic = df$basement
df <- df %>% relocate(attic, .after = basement)
# keep correct part of each string
df$basement <- str_sub(df$basement, -6, -1)
df$basement <- gsub('kelder','1',df$basement)
df$basement <- gsub('ag','0',df$basement)
df$basement <- gsub('gen','0',df$basement)
df$basement <- gsub('iering','0',df$basement)
df$basement <- gsub('zolder','0',df$basement)
df$basement <- as.numeric(df$basement)
############################
##   data visualization   ##
############################
ggplot(df,
aes(x = `Living space size (m2)`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("m2") + ylab("Prijs") +  theme_linedraw() + coord_cartesian(ylim = c(149000, 2000000), xlim = c(50, 400)) +
geom_smooth(method='lm')
ggplot(data = df, aes(x = Provincie, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 800000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
df_spec
# correlation matrix
cor <- as.data.frame(as.table(cor(use = "complete.obs", df[, unlist(lapply(df, is.numeric))])))
cor <- cor[!duplicated(cor$Freq), ]
View(cor)
View(df)
# regression model
model <- lm(Price ~ `Lot size (m2)`+`Living space size (m2)`+as.factor(rooms)+as.factor(bath_rooms)+
as.factor(bed_rooms)+as.factor(toilets)+as.factor(living_floors)+`Estimated neighbourhood price per m2`, data = df)
summary(model)
View(df_places)
View(df)
View(df_places)
library(lubridate)
library(haven)
library(dplyr)
library(car)
library(emmeans)
library(effectsize)
library(dataPreparation)
library(readxl)
library(stringr)
library(tidyr)
library(data.table)
library(tidyverse)
library(ggplot2)
#####################################
### Totale algemene response rate ###
#####################################
# Import NPS data
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Thesis/QlikSense data")
df <- read_xlsx("nps_verstuurd.xlsx")
df <- df %>% subset(Status == "Verstuurd")
# Select relevant columns
df <- df %>% dplyr::select(Datum, Relatie, Score, email)
# separate client_id and client_name
df <- separate(df, col=Relatie, into =c("Code", "relatie_naam"), sep=" - ")
# remove Hoppenbrouwers and vague data
df <- df[!(df$Code =="-"),]
df <- df[!(df$Code =="0"),]
df <- df[!(df$Code =="104485"),]
df <- df[!(df$email =="null"),]
df$Datum <- dmy(df$Datum)
class(df$Datum)
df$dag <- weekdays(df$Datum)
# convert scores to response/no response
df$response[df$Score=="0"|df$Score=="1"|df$Score=="2"|df$Score=="3"|df$Score=="4"|df$Score=="5"|
df$Score=="6"|df$Score=="7"|df$Score=="8"|df$Score=="9"|df$Score=="10"] <- "1"
df$response[is.na(df$response)] <- 0
# remove NA's
df <- na.omit(df)
# remove exact duplicates
df <- df %>% distinct(.keep_all = TRUE)
##########################################
### response rate per business channel ###
##########################################
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Thesis/Syntess data")
b2c_df <- read_xlsx("B2C_customer_df.xlsx") #B2C data
b2b_df <- read_xlsx("B2B_customer_df.xlsx") #B2B data
# Combine b2c_df and b2b_df into one dataframe
customer_df <- rbind(b2b_df, b2c_df)
# merge to create business channel variable
df <- merge(df, customer_df, by = 'Code')
df <- df %>% distinct(.keep_all = TRUE)
# subset data for logistic regression
df <- df %>% dplyr::select(Code, relatie_naam, Datum, Relatiegroepen, dag, response, email)
# create frame for response rate
response_day <- df %>% count(dag, response, Relatiegroepen)
# different frames per business_channel
response_day_z <- df %>% subset(Relatiegroepen == "Z")
response_day_p <- df %>% subset(Relatiegroepen == "P")
# extract year from date
response_day_z$year <- format(as.Date(response_day_z$Datum, format="%d/%m/%Y"),"%Y")
response_day_p$year <- format(as.Date(response_day_p$Datum, format="%d/%m/%Y"),"%Y")
response_day_z$year <- relevel(factor(response_day_z$year), ref = "2022")
response_day_p$year <- relevel(factor(response_day_p$year), ref = "2022")
########################
### Algemene respons ###
########################
# create ratio dataframe for B2C
total_requests_each_day_p <- response_day_p %>% count(dag, Relatiegroepen)
response_ratios_day_p <- response_day_p %>% count(dag, response)
response_ratios_day_p_true <- response_ratios_day_p[!(response_ratios_day_p$response=="0"),]
ratios_day_p <- left_join(total_requests_each_day_p, response_ratios_day_p_true, by = 'dag')
ratios_day_p <- ratios_day_p %>% select(-response)
ratios_day_p <- ratios_day_p %>% rename(sent = n.x,
response = n.y)
ratios_day_p$ratio <- ratios_day_p$response/ratios_day_p$sent * 100
# create ratio dataframe for B2B
total_requests_each_day_z <- response_day_z %>% count(dag, Relatiegroepen)
response_ratios_day_z <- response_day_z %>% count(dag, response)
response_ratios_day_z_true <- response_ratios_day_z[!(response_ratios_day_z$response=="0"),]
ratios_day_z <- left_join(total_requests_each_day_z, response_ratios_day_z_true, by = 'dag')
ratios_day_z <- ratios_day_z %>% select(-response)
ratios_day_z <- ratios_day_z %>% rename(sent = n.x,
response = n.y)
ratios_day_z$ratio <- ratios_day_z$response/ratios_day_z$sent * 100
# Combine b2c_df and b2b_df into one dataframe
ratios_total <- rbind(ratios_day_z, ratios_day_p)
ratios_total$dag <- factor(ratios_total$dag,levels = c("maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag", "zondag"))
# plot response ratios per day
ggplot(ratios_total,
aes(x = dag,
y = ratio,
fill = Relatiegroepen)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Algemene NPS respons per dag") +
xlab("Dag") + ylab("Respons ratio") + geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + ylim(0, 60)
# logistic regression B2C
model_general_p <- glm(as.factor(response) ~ dag+year, family=binomial, data=response_day_p)
summary(model_general_p)
# logistic regression B2B
model_general_z <- glm(as.factor(response) ~ dag+year, family=binomial, data=response_day_z)
summary(model_general_z)
#####################################
### response rate per nth request ###
#####################################
# extract year from date variable
df$year <- format(as.Date(df$Datum, format="%d/%m/%Y"),"%Y")
# add variable with each NPS request for a customer
df <- df[order(as.Date(df$Datum, format="%Y/%m/%d")), ]
df = data.table(df %>%
group_by(email) %>%
mutate(count = row_number()))
#df <-  df[df$count < 50, ]
df$index <- with(df, ifelse(count == 1, '1',
ifelse(count == 2, '2',
ifelse(count == 3, '3',
ifelse(count == 4, '4',
ifelse(count == 5, '5',
ifelse(count == 6, '6',
ifelse(count == 7, '7',
ifelse(count == 8, '8',
ifelse(count == 9, '9',
ifelse(count == 10, '10',
ifelse(count == 11, '11',
ifelse(count == 12, '12',
ifelse(count == 13, '13',
ifelse(count == 14, '14', '15<' )))))))))))))))
# subset per request
df_first <- subset(df, index == "1")
df_second <- subset(df, index == "2")
df_third <- subset(df, index == "3")
df_fourth <- subset(df, index == "4")
df_fifth <- subset(df, index == "5")
df_sixth <- subset(df, index == "6")
df_seventh <- subset(df, index == "7")
df_eighth <- subset(df, index == "8")
df_ninth <- subset(df, index == "9")
df_tenth <- subset(df, index == "10")
df_eleventh <- subset(df, index == "11")
df_twelfth<- subset(df, index == "12")
df_thirteenth <- subset(df, index == "13")
df_fourteenth <- subset(df, index == "14")
df_fifteenth <- subset(df, index == "15<")
### plotting 1st request ###
# different frames per business_channel
first_response_z <- df_first %>% subset(Relatiegroepen == "Z")
first_response_p <- df_first %>% subset(Relatiegroepen == "P")
# create ratio dataframe for B2C
total_requests_each_day_p_1 <- first_response_p %>% count(dag, Relatiegroepen)
response_ratios_day_p_1 <- first_response_p%>% count(dag, response)
response_ratios_day_p_1_true <- response_ratios_day_p_1[!(response_ratios_day_p_1$response=="0"),]
ratios_day_p_1 <- left_join(total_requests_each_day_p_1, response_ratios_day_p_1_true, by = 'dag')
ratios_day_p_1 <- ratios_day_p_1 %>% select(-response)
ratios_day_p_1 <- ratios_day_p_1 %>% rename(sent = n.x,
response = n.y)
ratios_day_p_1$ratio <- ratios_day_p_1$response/ratios_day_p_1$sent * 100
# create ratio dataframe for B2B
total_requests_each_day_z_1 <- first_response_z %>% count(dag, Relatiegroepen)
response_ratios_day_z_1 <- first_response_z%>% count(dag, response)
response_ratios_day_z_1_true <- response_ratios_day_z_1[!(response_ratios_day_z_1$response=="0"),]
ratios_day_z_1 <- left_join(total_requests_each_day_z_1, response_ratios_day_z_1_true, by = 'dag')
ratios_day_z_1 <- ratios_day_z_1 %>% select(-response)
ratios_day_z_1 <- ratios_day_z_1 %>% rename(sent = n.x,
response = n.y)
ratios_day_z_1$ratio <- ratios_day_z_1$response/ratios_day_z_1$sent * 100
# Combine b2c_df and b2b_df into one dataframe
ratios_total_1 <- rbind(ratios_day_z_1, ratios_day_p_1)
ratios_total_1$dag <- factor(ratios_total_1$dag,levels = c("maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag", "zondag"))
# plot response ratios per day
ggplot(ratios_total_1,
aes(x = dag,
y = ratio,
fill = Relatiegroepen)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) + ggtitle("NPS respons per dag - eerste verzoek") +
xlab("Dag") + ylab("Respons ratio") + geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + ylim(0, 60)
# logistic regression B2C
first_response_p$year <- relevel(factor(first_response_p$year), ref = "2022")
model_general_p_1 <- glm(as.factor(response) ~ dag+year, family=binomial, data=first_response_p)
summary(model_general_p_1)
# logistic regression B2B
first_response_z$year <- relevel(factor(first_response_z$year), ref = "2022")
model_general_z_1 <- glm(as.factor(response) ~ dag+year, family=binomial, data=first_response_z)
summary(model_general_z_1)
### plotting 2nd request ###
# different frames per business_channel
second_response_z <- df_second %>% subset(Relatiegroepen == "Z")
second_response_p <- df_second %>% subset(Relatiegroepen == "P")
# create ratio data frame for B2C
total_requests_each_day_p_2 <- second_response_p %>% count(dag, Relatiegroepen)
response_ratios_day_p_2 <- second_response_p%>% count(dag, response)
response_ratios_day_p_2_true <- response_ratios_day_p_2[!(response_ratios_day_p_2$response=="0"),]
ratios_day_p_2 <- left_join(total_requests_each_day_p_2, response_ratios_day_p_2_true, by = 'dag')
ratios_day_p_2 <- ratios_day_p_2 %>% select(-response)
ratios_day_p_2 <- ratios_day_p_2 %>% rename(sent = n.x,
response = n.y)
ratios_day_p_2$ratio <- ratios_day_p_2$response/ratios_day_p_2$sent * 100
# create ratio data frame for B2B
total_requests_each_day_z_2 <- second_response_z %>% count(dag, Relatiegroepen)
response_ratios_day_z_2 <- second_response_z%>% count(dag, response)
response_ratios_day_z_2_true <- response_ratios_day_z_2[!(response_ratios_day_z_2$response=="0"),]
ratios_day_z_2 <- left_join(total_requests_each_day_z_2, response_ratios_day_z_2_true, by = 'dag')
ratios_day_z_2 <- ratios_day_z_2 %>% select(-response)
ratios_day_z_2 <- ratios_day_z_2 %>% rename(sent = n.x,
response = n.y)
ratios_day_z_2$ratio <- ratios_day_z_2$response/ratios_day_z_2$sent * 100
# Combine b2c_df and b2b_df into one dataframe
ratios_total_2 <- rbind(ratios_day_z_2, ratios_day_p_2)
ratios_total_2$dag <- factor(ratios_total_2$dag,levels = c("maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag", "zondag"))
# plot response ratios per day
ggplot(ratios_total_2,
aes(x = dag,
y = ratio,
fill = Relatiegroepen)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) + ggtitle("NPS respons per dag - tweede verzoek") +
xlab("Dag") + ylab("Respons ratio") + geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + ylim(0, 60)
# logistic regression B2C
second_response_p$year <- relevel(factor(second_response_p$year), ref = "2022")
model_general_p_2 <- glm(as.factor(response) ~ dag+year, family=binomial, data=second_response_p)
summary(model_general_p_2)
# logistic regression B2B
second_response_z$year <- relevel(factor(second_response_z$year), ref = "2022")
model_general_z_2 <- glm(as.factor(response) ~ dag+year, family=binomial, data=second_response_z)
summary(model_general_z_2)
### plotting 3rd request ###
# different frames per business_channel
third_response_z <- df_third %>% subset(Relatiegroepen == "Z")
third_response_p <- df_third %>% subset(Relatiegroepen == "P")
# create ratio data frame for B2C
total_requests_each_day_p_3 <- third_response_p %>% count(dag, Relatiegroepen)
response_ratios_day_p_3 <- third_response_p%>% count(dag, response)
response_ratios_day_p_3_true <- response_ratios_day_p_3[!(response_ratios_day_p_3$response=="0"),]
ratios_day_p_3 <- left_join(total_requests_each_day_p_3, response_ratios_day_p_3_true, by = 'dag')
ratios_day_p_3 <- ratios_day_p_3 %>% select(-response)
ratios_day_p_3 <- ratios_day_p_3 %>% rename(sent = n.x,
response = n.y)
ratios_day_p_3$ratio <- ratios_day_p_3$response/ratios_day_p_3$sent * 100
# create ratio data frame for B2B
total_requests_each_day_z_3 <- third_response_z %>% count(dag, Relatiegroepen)
response_ratios_day_z_3 <- third_response_z%>% count(dag, response)
response_ratios_day_z_3_true <- response_ratios_day_z_3[!(response_ratios_day_z_3$response=="0"),]
ratios_day_z_3 <- left_join(total_requests_each_day_z_3, response_ratios_day_z_3_true, by = 'dag')
ratios_day_z_3 <- ratios_day_z_3 %>% select(-response)
ratios_day_z_3 <- ratios_day_z_3 %>% rename(sent = n.x,
response = n.y)
ratios_day_z_3$ratio <- ratios_day_z_3$response/ratios_day_z_3$sent * 100
# Combine b2c_df and b2b_df into one dataframe
ratios_total_3 <- rbind(ratios_day_z_3, ratios_day_p_3)
ratios_total_3$dag <- factor(ratios_total_3$dag,levels = c("maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag", "zondag"))
# plot response ratios per day
ggplot(ratios_total_3,
aes(x = dag,
y = ratio,
fill = Relatiegroepen)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) + ggtitle("NPS respons per dag - derde verzoek") +
xlab("Dag") + ylab("Respons ratio") + geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + ylim(0, 60)
# logistic regression B2C
third_response_p$year <- relevel(factor(third_response_p$year), ref = "2022")
model_general_p_3 <- glm(as.factor(response) ~ dag+year, family=binomial, data=third_response_p)
summary(model_general_p_3)
# logistic regression B2B
third_response_z$year <- relevel(factor(third_response_z$year), ref = "2022")
model_general_z_3 <- glm(as.factor(response) ~ dag+year, family=binomial, data=third_response_z)
summary(model_general_z_3)
#######################################
##### general development response #####
#######################################
response_first <- df_first %>% count(response, Relatiegroepen)
response_second <- df_second %>% count(response, Relatiegroepen)
response_third <- df_third %>% count(response, Relatiegroepen)
response_fourth <- df_fourth %>% count(response, Relatiegroepen)
response_fifth <- df_fifth %>% count(response, Relatiegroepen)
response_sixth <- df_sixth %>% count(response, Relatiegroepen)
response_seventh <- df_seventh %>% count(response, Relatiegroepen)
response_eighth <- df_eighth %>% count(response, Relatiegroepen)
response_ninth <- df_ninth %>% count(response, Relatiegroepen)
response_tenth <- df_tenth %>% count(response, Relatiegroepen)
response_eleventh <- df_eleventh %>% count(response, Relatiegroepen)
response_twelfth <- df_twelfth %>% count(response, Relatiegroepen)
response_thirteenth <- df_thirteenth %>% count(response, Relatiegroepen)
response_fourteenth <- df_fourteenth %>% count(response, Relatiegroepen)
response_fifteenth <- df_fifteenth %>% count(response, Relatiegroepen)
#first
total_requests_first <- df_first %>% count(Relatiegroepen, count)
response_first_true <- response_first[!(response_first$response=="0"),]
ratio_first <- left_join(total_requests_first, response_first_true, by = 'Relatiegroepen')
ratio_first <- ratio_first %>% select(-response, - count)
ratio_first <- ratio_first %>% rename(sent = n.x,
response = n.y)
ratio_first$ratio <- ratio_first$response/ratio_first$sent * 100
ratio_first <- ratio_first %>%
mutate(count = 1)
#second
total_requests_second <- df_second %>% count(Relatiegroepen, count)
response_second_true <- response_second[!(response_second$response=="0"),]
ratio_second <- left_join(total_requests_second, response_second_true, by = 'Relatiegroepen')
ratio_second <- ratio_second %>% select(-response, - count)
ratio_second <- ratio_second %>% rename(sent = n.x,
response = n.y)
ratio_second$ratio <- ratio_second$response/ratio_second$sent * 100
ratio_second <- ratio_second %>%
mutate(count = 2)
#third
total_requests_third <- df_third %>% count(Relatiegroepen, count)
response_third_true <- response_third[!(response_third$response=="0"),]
ratio_third <- left_join(total_requests_third, response_third_true, by = 'Relatiegroepen')
ratio_third <- ratio_third %>% select(-response, - count)
ratio_third <- ratio_third %>% rename(sent = n.x,
response = n.y)
ratio_third$ratio <- ratio_third$response/ratio_third$sent * 100
ratio_third <- ratio_third %>%
mutate(count = 3)
#fourth
total_requests_fourth <- df_fourth %>% count(Relatiegroepen, count)
response_fourth_true <- response_fourth[!(response_fourth$response=="0"),]
ratio_fourth <- left_join(total_requests_fourth, response_fourth_true, by = 'Relatiegroepen')
ratio_fourth <- ratio_fourth %>% select(-response, - count)
ratio_fourth <- ratio_fourth %>% rename(sent = n.x,
response = n.y)
ratio_fourth$ratio <- ratio_fourth$response/ratio_fourth$sent * 100
ratio_fourth <- ratio_fourth %>%
mutate(count = 4)
#fifth
total_requests_fifth <- df_fifth %>% count(Relatiegroepen, count)
response_fifth_true <- response_fifth[!(response_fifth$response=="0"),]
ratio_fifth <- left_join(total_requests_fifth, response_fifth_true, by = 'Relatiegroepen')
ratio_fifth <- ratio_fifth %>% select(-response, - count)
ratio_fifth <- ratio_fifth %>% rename(sent = n.x,
response = n.y)
ratio_fifth$ratio <- ratio_fifth$response/ratio_fifth$sent * 100
ratio_fifth <- ratio_fifth %>%
mutate(count = 5)
#sixth
total_requests_sixth<- df_sixth %>% count(Relatiegroepen, count)
response_sixth_true <- response_sixth[!(response_sixth$response=="0"),]
ratio_sixth <- left_join(total_requests_sixth, response_sixth_true, by = 'Relatiegroepen')
ratio_sixth <- ratio_sixth %>% select(-response, - count)
ratio_sixth <- ratio_sixth %>% rename(sent = n.x,
response = n.y)
ratio_sixth$ratio <- ratio_sixth$response/ratio_sixth$sent * 100
ratio_sixth <- ratio_sixth %>%
mutate(count = 6)
#seventh
total_requests_seventh <- df_seventh %>% count(Relatiegroepen, count)
response_seventh_true <- response_seventh[!(response_seventh$response=="0"),]
ratio_seventh <- left_join(total_requests_seventh, response_seventh_true, by = 'Relatiegroepen')
ratio_seventh <- ratio_seventh %>% select(-response, - count)
ratio_seventh <- ratio_seventh %>% rename(sent = n.x,
response = n.y)
ratio_seventh$ratio <- ratio_seventh$response/ratio_seventh$sent * 100
ratio_seventh <- ratio_seventh %>%
mutate(count = 7)
#eighth
total_requests_eighth <- df_eighth %>% count(Relatiegroepen, count)
response_eighth_true <- response_eighth[!(response_eighth$response=="0"),]
ratio_eighth <- left_join(total_requests_eighth, response_eighth_true, by = 'Relatiegroepen')
ratio_eighth <- ratio_eighth %>% select(-response, - count)
ratio_eighth <- ratio_eighth %>% rename(sent = n.x,
response = n.y)
ratio_eighth$ratio <- ratio_eighth$response/ratio_eighth$sent * 100
ratio_eighth <- ratio_eighth %>%
mutate(count = 8)
#ninth
total_requests_ninth <- df_ninth %>% count(Relatiegroepen, count)
response_ninth_true <- response_ninth[!(response_ninth$response=="0"),]
ratio_ninth <- left_join(total_requests_ninth, response_ninth_true, by = 'Relatiegroepen')
ratio_ninth <- ratio_ninth %>% select(-response, - count)
ratio_ninth <- ratio_ninth %>% rename(sent = n.x,
response = n.y)
ratio_ninth$ratio <- ratio_ninth$response/ratio_ninth$sent * 100
ratio_ninth <- ratio_ninth %>%
mutate(count = 9)
#tenth
total_requests_tenth <- df_tenth %>% count(Relatiegroepen, count)
response_tenth_true <- response_tenth[!(response_tenth$response=="0"),]
ratio_tenth <- left_join(total_requests_tenth, response_tenth_true, by = 'Relatiegroepen')
ratio_tenth <- ratio_tenth %>% select(-response, - count)
ratio_tenth <- ratio_tenth %>% rename(sent = n.x,
response = n.y)
ratio_tenth$ratio <- ratio_tenth$response/ratio_tenth$sent * 100
ratio_tenth <- ratio_tenth %>%
mutate(count = 10)
#eleventh
total_requests_eleventh <- df_eleventh %>% count(Relatiegroepen, count)
response_eleventh_true <- response_eleventh[!(response_eleventh$response=="0"),]
ratio_eleventh <- left_join(total_requests_eleventh, response_eleventh_true, by = 'Relatiegroepen')
ratio_eleventh <- ratio_eleventh %>% select(-response, - count)
ratio_eleventh <- ratio_eleventh %>% rename(sent = n.x,
response = n.y)
ratio_eleventh$ratio <- ratio_eleventh$response/ratio_eleventh$sent * 100
ratio_eleventh <- ratio_eleventh %>%
mutate(count = 11)
#twelfth
total_requests_twelfth <- df_twelfth %>% count(Relatiegroepen, count)
response_twelfth_true <- response_twelfth[!(response_twelfth$response=="0"),]
ratio_twelfth <- left_join(total_requests_twelfth, response_twelfth_true, by = 'Relatiegroepen')
ratio_twelfth <- ratio_twelfth %>% select(-response, - count)
ratio_twelfth <- ratio_twelfth %>% rename(sent = n.x,
response = n.y)
ratio_twelfth$ratio <- ratio_twelfth$response/ratio_twelfth$sent * 100
ratio_twelfth <- ratio_twelfth %>%
mutate(count = 12)
#thirteenth
total_requests_thirteenth <- df_thirteenth %>% count(Relatiegroepen, count)
response_thirteenth_true <- response_thirteenth[!(response_thirteenth$response=="0"),]
ratio_thirteenth <- left_join(total_requests_thirteenth, response_thirteenth_true, by = 'Relatiegroepen')
ratio_thirteenth <- ratio_thirteenth %>% select(-response, - count)
ratio_thirteenth <- ratio_thirteenth %>% rename(sent = n.x,
response = n.y)
ratio_thirteenth$ratio <- ratio_thirteenth$response/ratio_thirteenth$sent * 100
ratio_thirteenth <- ratio_thirteenth %>%
mutate(count = 13)
#fourteenth
total_requests_fourteenth <- df_fourteenth %>% count(Relatiegroepen, count)
response_fourteenth_true <- response_fourteenth[!(response_fourteenth$response=="0"),]
ratio_fourteenth <- left_join(total_requests_fourteenth, response_fourteenth_true, by = 'Relatiegroepen')
ratio_fourteenth <- ratio_fourteenth %>% select(-response, - count)
ratio_fourteenth <- ratio_fourteenth %>% rename(sent = n.x,
response = n.y)
ratio_fourteenth$ratio <- ratio_fourteenth$response/ratio_fourteenth$sent * 100
ratio_fourteenth <- ratio_fourteenth %>%
mutate(count = 14)
#fifteenth
total_requests_fifteenth <- df_fifteenth %>% count(Relatiegroepen, count)
response_fifteenth_true <- response_fifteenth[!(response_fifteenth$response=="0"),]
ratio_fifteenth <- left_join(total_requests_fifteenth, response_fifteenth_true, by = 'Relatiegroepen')
ratio_fifteenth <- ratio_fifteenth %>% select(-response, - count)
ratio_fifteenth <- ratio_fifteenth %>% rename(sent = n.x,
response = n.y)
ratio_fifteenth$ratio <- ratio_fifteenth$response/ratio_fifteenth$sent * 100
ratio_fifteenth <- ratio_fifteenth %>%
mutate(count = 15)
# merge frames
requests_flow <- rbind(ratio_first, ratio_second, ratio_third, ratio_fourth, ratio_fifth,
ratio_sixth, ratio_seventh, ratio_eighth, ratio_ninth, ratio_tenth,
ratio_eleventh, ratio_twelfth, ratio_thirteenth, ratio_fourteenth)
requests_flow[is.na(requests_flow)] <- 0
# plot data
ggplot(data=requests_flow, aes(x=as.factor(count), y=ratio, group=Relatiegroepen, color = Relatiegroepen)) +
geom_line() + geom_point()+
scale_color_brewer(palette="Paired")+
theme_minimal() + ylim(0, 60) + ggtitle("NPS respons") +
xlab("Aanvraag") + ylab("% respons")
# plot response ratios per day
ggplot(ratios_total,
aes(x = dag,
y = ratio,
fill = Relatiegroepen)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Algemene NPS respons per dag") +
xlab("Dag") + ylab("Respons ratio") + geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + ylim(0, 60)
options(scipen = 999)
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Projects/funda/data")
df <- read_excel("raw_data_for_excel_analysis.xlsx")
df_places <- read_excel("plaatsnamen_nederland.xlsx")
View(df_places)
df_places <- na.omit(df_places)
df_places <- df_places[!duplicated(df_places$City), ]
df_full <- merge(df, df_places, by = 'City')
View(df_full)
# set working directory
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Projects/funda/data")
# import funda and city data
df <- read_excel("raw_data_for_excel_analysis.xlsx")
df_places <- read_excel("plaatsnamen_nederland.xlsx")
# remove na's, duplicates
df_places <- na.omit(df_places)
df_places <- df_places[!duplicated(df_places$City), ]
# merge funda and city data
df_full <- merge(df, df_places, by = 'City')
View(df_places)
View(df_full)
# identify duplicated adresses
df <- unique(df_full)
View(df)
View(df)
