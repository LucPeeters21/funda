tabPanel("Type woning", leafletOutput("map1", width = "100%", height = 800)),
tabPanel("Prijscategorie", leafletOutput("map1", width = "100%", height = 800)),
))
),
# Navigation bar - Product
navbarPage("Boxplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Project
navbarPage("Scatterplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Evaluatie
navbarPage("Barplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Ontwikkeling
navbarPage("Regressie",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Data
navbarPage("Data"),
# Show output
mainPanel(
dataTableOutput("table")
)
)
# Define server logic required to draw output
server <- function(input, output) {
output$map0 <- renderLeaflet({
map0
})
output$map1 <- renderLeaflet({
map1
})
output$table <- renderDataTable({
df <- df
})
}
# Run the application
shinyApp(ui = ui, server = server)
#######################
## shiny application ##
#######################
# Define UI for application that draws a histogram
ui <- fluidPage(theme = shinytheme("cerulean"),
# Application title
titlePanel("Huizenprijs generator"),
# Navigation bar - Klantenkaart
navbarPage("Huizenkaart",
# Show output
mainPanel(
tabsetPanel(
tabPanel("Type woning", leafletOutput("map1", width = "100%", height = 800)),
tabPanel("Prijscategorie", leafletOutput("map1", width = "100%", height = 800)),
))
),
# Navigation bar - Product
navbarPage("Boxplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Project
navbarPage("Scatterplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Evaluatie
navbarPage("Barplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Ontwikkeling
navbarPage("Regressie",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Data
navbarPage("Data"),
# Show output
mainPanel(
dataTableOutput("table")
)
)
# Define server logic required to draw output
server <- function(input, output) {
output$map0 <- renderLeaflet({
map0
})
output$map1 <- renderLeaflet({
map1
})
output$table <- renderDataTable({
df <- df
})
}
# Run the application
shinyApp(ui = ui, server = server)
#######################
## shiny application ##
#######################
# Define UI for application that draws a histogram
ui <- fluidPage(theme = shinytheme("cerulean"),
# Application title
titlePanel("Huizenprijs generator"),
# Navigation bar - Klantenkaart
navbarPage("Huizenkaart",
# Show output
mainPanel(
tabsetPanel(
tabPanel("Type woning", leafletOutput("map0", width = "100%", height = 800)),
tabPanel("Prijscategorie", leafletOutput("map1", width = "100%", height = 800)),
))
),
# Navigation bar - Product
navbarPage("Boxplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Project
navbarPage("Scatterplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Evaluatie
navbarPage("Barplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Ontwikkeling
navbarPage("Regressie",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Data
navbarPage("Data"),
# Show output
mainPanel(
dataTableOutput("table")
)
)
# Define server logic required to draw output
server <- function(input, output) {
output$map0 <- renderLeaflet({
map0
})
output$map1 <- renderLeaflet({
map1
})
output$table <- renderDataTable({
df <- df
})
}
# Run the application
shinyApp(ui = ui, server = server)
ggplot(df,
aes(x = `Living space size (m2)`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("m2") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(149000, 2000000), xlim = c(50, 400)) +
geom_smooth(method='lm')
#######################
## shiny application ##
#######################
# Define UI for application that draws a histogram
ui <- fluidPage(theme = shinytheme("cerulean"),
# Application title
titlePanel("Huizenprijs generator"),
# Navigation bar - Klantenkaart
navbarPage("Huizenkaart",
# Show output
mainPanel(
tabsetPanel(
tabPanel("Type woning", leafletOutput("map0", width = "100%", height = 800)),
tabPanel("Prijscategorie", leafletOutput("map1", width = "100%", height = 800)),
))
),
# Navigation bar - Product
navbarPage("Boxplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Project
navbarPage("Scatterplots",
# Show output
mainPanel(
tabsetPanel(
tabPanel("Woonruimte", plotlyOutput("woonruimte")),
))
),
# Navigation bar - Evaluatie
navbarPage("Barplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Ontwikkeling
navbarPage("Regressie",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Data
navbarPage("Data"),
# Show output
mainPanel(
dataTableOutput("table")
)
)
# Define server logic required to draw output
server <- function(input, output) {
output$woonruimte <- renderPlotly({
ggplot(df,
aes(x = `Living space size (m2)`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("m2") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(149000, 2000000), xlim = c(50, 400)) +
geom_smooth(method='lm')
})
output$map0 <- renderLeaflet({
map0
})
output$map1 <- renderLeaflet({
map1
})
output$table <- renderDataTable({
df <- df
})
}
# Run the application
shinyApp(ui = ui, server = server)
#######################
## shiny application ##
#######################
# Define UI for application that draws a histogram
ui <- fluidPage(theme = shinytheme("cerulean"),
# Application title
titlePanel("Nederlandse huizenmarkt"),
# Navigation bar - Klantenkaart
navbarPage("Huizenkaart",
# Show output
mainPanel(
tabsetPanel(
tabPanel("Type woning", leafletOutput("map0", width = "100%", height = 800)),
tabPanel("Prijscategorie", leafletOutput("map1", width = "100%", height = 800)),
))
),
# Navigation bar - Product
navbarPage("Boxplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Project
navbarPage("Scatterplots",
# Show output
mainPanel(
tabsetPanel(
tabPanel("Woonruimte", plotlyOutput("woonruimte")),
))
),
# Navigation bar - Evaluatie
navbarPage("Barplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Ontwikkeling
navbarPage("Regressie",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Data
navbarPage("Data"),
# Show output
mainPanel(
dataTableOutput("table")
)
)
# Define server logic required to draw output
server <- function(input, output) {
output$woonruimte <- renderPlotly({
ggplot(df,
aes(x = `Living space size (m2)`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("m2") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(149000, 2000000), xlim = c(50, 400)) +
geom_smooth(method='lm')
})
output$map0 <- renderLeaflet({
map0
})
output$map1 <- renderLeaflet({
map1
})
output$table <- renderDataTable({
df <- df
})
}
# Run the application
shinyApp(ui = ui, server = server)
ggplot(data = df, aes(x = placement, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 1500000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
ggplot(data = df, aes(x = `House type`, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 2000000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
ggplot(data = df, aes(x = `House type`, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 2000000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
#######################
## shiny application ##
#######################
# Define UI for application that draws a histogram
ui <- fluidPage(theme = shinytheme("cerulean"),
# Application title
titlePanel("Nederlandse huizenmarkt"),
# Navigation bar - Klantenkaart
navbarPage("Huizenkaart",
# Show output
mainPanel(
tabsetPanel(
tabPanel("Type woning", leafletOutput("map0", width = "100%", height = 800)),
tabPanel("Prijscategorie", leafletOutput("map1", width = "100%", height = 800)),
))
),
# Navigation bar - Product
navbarPage("Boxplots",
# Show output
mainPanel(
tabsetPanel(
tabPanel("Type woning", plotlyOutput("typewoning")),
))
),
# Navigation bar - Project
navbarPage("Scatterplots",
# Show output
mainPanel(
tabsetPanel(
tabPanel("Woonruimte", plotlyOutput("woonruimte")),
))
),
# Navigation bar - Evaluatie
navbarPage("Barplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Ontwikkeling
navbarPage("Regressie",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Data
navbarPage("Data"),
# Show output
mainPanel(
dataTableOutput("table")
)
)
# Define server logic required to draw output
server <- function(input, output) {
output$typewoning <- renderPlotly({
ggplot(data = df, aes(x = `House type`, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 2000000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
})
output$woonruimte <- renderPlotly({
ggplot(df,
aes(x = `Living space size (m2)`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("m2") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(149000, 2000000), xlim = c(50, 400)) +
geom_smooth(method='lm')
})
output$map0 <- renderLeaflet({
map0
})
output$map1 <- renderLeaflet({
map1
})
output$table <- renderDataTable({
df <- df
})
}
# Run the application
shinyApp(ui = ui, server = server)
#######################
## shiny application ##
#######################
# Define UI for application that draws a histogram
ui <- fluidPage(theme = shinytheme("cerulean"),
# Application title
titlePanel("Nederlandse huizenmarkt"),
# Navigation bar - Klantenkaart
navbarPage("Huizenkaart",
# Show output
mainPanel(
tabsetPanel(
tabPanel("Type woning", leafletOutput("map0", width = "100%", height = 800)),
tabPanel("Prijscategorie", leafletOutput("map1", width = "100%", height = 800)),
))
),
# Navigation bar - Product
navbarPage("Boxplots",
# Show output
mainPanel(
tabsetPanel(
tabPanel("Provincie", plotlyOutput("provincie")),
tabPanel("Type woning", plotlyOutput("typewoning")),
))
),
# Navigation bar - Project
navbarPage("Scatterplots",
# Show output
mainPanel(
tabsetPanel(
tabPanel("Woonruimte", plotlyOutput("woonruimte")),
))
),
# Navigation bar - Evaluatie
navbarPage("Barplots",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Ontwikkeling
navbarPage("Regressie",
# Show output
mainPanel(
tabsetPanel(
))
),
# Navigation bar - Data
navbarPage("Data"),
# Show output
mainPanel(
dataTableOutput("table")
)
)
# Define server logic required to draw output
server <- function(input, output) {
output$provincie <- renderPlotly({
ggplot(data = df, aes(x = Provincie, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 800000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
})
output$typewoning <- renderPlotly({
ggplot(data = df, aes(x = `House type`, y = Price)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
coord_cartesian(ylim = c(200000, 2000000)) + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red")
})
output$woonruimte <- renderPlotly({
ggplot(df,
aes(x = `Living space size (m2)`,
y = Price)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Funda") +
xlab("m2") + ylab("price") +  theme_linedraw() + coord_cartesian(ylim = c(149000, 2000000), xlim = c(50, 400)) +
geom_smooth(method='lm')
})
output$map0 <- renderLeaflet({
map0
})
output$map1 <- renderLeaflet({
map1
})
output$table <- renderDataTable({
df <- df
})
}
# Run the application
shinyApp(ui = ui, server = server)
